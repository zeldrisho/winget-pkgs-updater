name: Update WinGet Packages

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'

permissions:
  contents: read
  pull-requests: write  # For creating PRs via gh CLI

jobs:
  check-versions:
    name: Check for updates
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.check-updates.outputs.matrix }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install PowerShell
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https software-properties-common
          wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell
      
      - name: Install Python dependencies
        run: |
          pip install -r scripts/requirements.txt
      
      - name: Find checkver files
        id: find-checkver
        run: |
          if [ -n "${{ github.event.inputs.package }}" ]; then
            files=$(find manifests -name "${{ github.event.inputs.package }}.checkver.yaml")
          else
            files=$(find manifests -name "*.checkver.yaml")
          fi
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$files" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Check for updates
        id: check-updates
        run: |
          updates='[]'
          while IFS= read -r file; do
            if [ -n "$file" ]; then
              echo "Checking $file..."
              if python scripts/check_version.py "$file" "version_info.json"; then
                if [ -f "version_info.json" ]; then
                  package_id=$(jq -r '.packageIdentifier' version_info.json)
                  version=$(jq -r '.version' version_info.json)
                  
                  # Check if this version already exists in microsoft/winget-pkgs
                  manifest_path=$(jq -r '.checkver_config.manifestPath' version_info.json)
                  echo "Checking if $manifest_path/$version exists..."
                  
                  if gh api "/repos/microsoft/winget-pkgs/contents/$manifest_path/$version" > /dev/null 2>&1; then
                    echo "‚è≠Ô∏è  Version $version already exists in microsoft/winget-pkgs, skipping"
                  else
                    echo "‚ú® New version found: $package_id $version"
                    update_json=$(jq -n \
                      --arg file "$file" \
                      --arg pkg "$package_id" \
                      --arg ver "$version" \
                      '{checkver: $file, package: $pkg, version: $ver}')
                    updates=$(echo "$updates" | jq --argjson item "$update_json" '. + [$item]')
                  fi
                  rm -f version_info.json
                fi
              fi
            fi
          done <<< "${{ steps.find-checkver.outputs.files }}"
          
          # Use EOF delimiter for multiline JSON output
          echo "matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$updates" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}
      
      - name: Display found updates
        run: |
          echo "Found updates:"
          echo '${{ steps.check-updates.outputs.matrix }}' | jq .

  update-manifest:
    name: Update ${{ matrix.package }} to ${{ matrix.version }}
    needs: check-versions
    if: needs.check-versions.outputs.matrix != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.check-versions.outputs.matrix) }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install PowerShell
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https software-properties-common
          wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell
      
      - name: Install Python dependencies
        run: |
          pip install -r scripts/requirements.txt
      
      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Check version and generate update info
        id: check-version
        run: |
          python scripts/check_version.py "${{ matrix.checkver }}" "version_info.json"
          if [ -f "version_info.json" ]; then
            echo "has_update=true" >> $GITHUB_OUTPUT
          else
            echo "has_update=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Update manifest and create PR
        if: steps.check-version.outputs.has_update == 'true'
        run: |
          python scripts/update_manifest.py "${{ matrix.package }}.checkver.yaml" version_info.json
        env:
          # Use WINGET_PKGS_TOKEN if available, fallback to GITHUB_TOKEN
          # Note: GITHUB_TOKEN only works for PRs in same repo, use PAT for forks
          GITHUB_TOKEN: ${{ secrets.WINGET_PKGS_TOKEN || github.token }}
          GH_TOKEN: ${{ secrets.WINGET_PKGS_TOKEN || github.token }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          GITHUB_RUN_ID: ${{ github.run_id }}
      
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: version-info-${{ matrix.package }}-${{ matrix.version }}
          path: version_info.json
          if-no-files-found: ignore

  summary:
    name: Update Summary
    needs: [check-versions, update-manifest]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate summary
        run: |
          echo "# WinGet Packages Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          matrix='${{ needs.check-versions.outputs.matrix }}'
          count=$(echo "$matrix" | jq 'length')
          
          if [ "$count" -eq 0 ]; then
            echo "‚úÖ No updates found. All packages are up to date." >> $GITHUB_STEP_SUMMARY
          else
            echo "üì¶ Found $count package(s) to update:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "$matrix" | jq -r '.[] | "- **\(.package)** version \(.version)"' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Check the [Pull Requests](https://github.com/microsoft/winget-pkgs/pulls?q=is:pr+author:${{ github.repository_owner }}) in microsoft/winget-pkgs" >> $GITHUB_STEP_SUMMARY
          fi
